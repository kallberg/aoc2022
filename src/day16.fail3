use std::{
    collections::{HashSet, VecDeque},
    hash::Hash,
};

use std::cmp::min;
use std::usize::MAX;

#[derive(Eq, Clone, Debug)]
pub struct Edge {
    pub from: usize,
    pub to: usize,
    pub distance: usize,
}

impl Edge {
    pub fn normalize(&mut self) {
        if self.from > self.to {
            let tmp = self.to;
            self.to = self.from;

            self.from = tmp;
        }
    }

    pub fn contains(&self, value: usize) -> bool {
        value == self.from || value == self.to
    }

    pub fn other(&self, value: usize) -> usize {
        match (self.from == value, self.to == value) {
            (true, true) => self.from,
            (true, false) => self.to,
            (false, true) => self.from,
            (false, false) => {
                panic!("find other side of edge that does not contain requested node")
            }
        }
    }
}

impl Hash for Edge {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.from.hash(state);
        self.to.hash(state);
    }
}

impl PartialEq for Edge {
    fn eq(&self, other: &Self) -> bool {
        self.from == other.from && self.to == other.to
    }
}

#[derive(Eq, Clone)]
pub struct Node {
    pub id: usize,
    pub name: String,
    pub value: usize,
    pub starting_cost: usize,
}

impl PartialEq for Node {
    fn eq(&self, other: &Self) -> bool {
        self.id == other.id
    }
}

impl Hash for Node {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}

pub struct Graph {
    pub nodes: HashSet<Node>,
    pub edges: HashSet<Edge>,
    pub distance: Vec<Vec<usize>>,
}

impl Graph {
    fn solve(&self, time: usize, start: usize, nodes: &Vec<Node>) -> usize {
        if time == 0 || nodes.is_empty() {
            return 0;
        }

        let mut scores = vec![];

        for index in 0..nodes.len() {
            let node = &nodes[index];

            if node.id == start {
                continue;
            }

            let distance = self.distance[start][node.id];

            if distance + 1 > time {
                continue;
            }

            let remaining_time = time - distance - 1;

            let mut score = node.value * remaining_time;

            let mut next_nodes = nodes.clone();
            next_nodes.remove(index);

            score += self.solve(remaining_time, node.id, &next_nodes);

            scores.push(score);
        }

        scores.into_iter().max().unwrap_or(0)
    }

    fn as_floyd_warshall_graph(&self) -> Vec<Vec<Option<usize>>> {
        let n = self.nodes.len();
        let mut graph = vec![vec![None; n]; n];

        for i in 0..n {
            for j in 0..n {
                if i == j {
                    graph[i][j] = Some(0);
                } else {
                    graph[i][j] = self.edge_distance(i, j);
                }
            }
        }

        graph
    }

    fn node_name(&self, id: usize) -> String {
        self.nodes
            .iter()
            .find(|node| node.id == id)
            .expect("find node by id")
            .name
            .clone()
    }

    fn edge_distance(&self, from: usize, to: usize) -> Option<usize> {
        self.edges
            .iter()
            .filter(|edge| edge.contains(from) && edge.contains(to))
            .map(|edge| edge.distance)
            .min()
    }

    fn path_score(&self, path: &mut VecDeque<usize>) -> usize {
        if path.len() == 0 {
            return 0;
        }

        let mut score = 0;
        let mut total_open = 0;

        let first_index = path.pop_front().unwrap();
        let first_node = self
            .nodes
            .iter()
            .find(|node| node.id == first_index)
            .expect("find first node in path");

        let mut time_left = 30 - first_node.starting_cost;

        score += time_left * first_node.value;
        total_open += first_node.value;

        let mut current_node = first_node;

        while let Some(next) = path.pop_front() {
            let next_node = self
                .nodes
                .iter()
                .find(|node| node.id == next)
                .expect("find next node in path");

            let distance = self.distance[current_node.id][next];
            time_left -= distance;
            time_left -= 1;

            score += next_node.value * time_left;
            total_open += next_node.value;

            current_node = next_node;
        }

        score
    }

    fn simplify(&mut self, start_node: usize) {
        for node in &self.nodes.clone() {
            if node.value == 0 {
                for edge in &self.edges.clone() {
                    if edge.contains(node.id) {
                        self.edges.remove(edge);
                    }
                }

                self.nodes.remove(node);
            }
        }

        for mut node in self.nodes.clone() {
            node.starting_cost = self.distance[start_node][node.id] + 1;
            self.nodes.replace(node);
        }
    }

    fn node_id_from_name(&self, name: String) -> usize {
        self.nodes
            .iter()
            .find(|node| node.name == name)
            .expect("node by name")
            .id
    }
}

impl From<&str> for Graph {
    fn from(value: &str) -> Self {
        let mut output = Self {
            edges: HashSet::new(),
            nodes: HashSet::new(),
            distance: vec![],
        };

        let mut direct_connections = vec![];

        for (index, line) in value.lines().enumerate() {
            let line = line.strip_prefix("Valve ").unwrap();
            let (valve_name, line) = line.split_once(' ').unwrap();
            let (flow_rate_str, line) = line
                .strip_prefix("has flow rate=")
                .unwrap()
                .split_once(';')
                .unwrap();
            let (_, line) = line.split_once("valve").unwrap().1.split_once(' ').unwrap();

            let mut connections: Vec<String> =
                line.split(", ").map(|str| str.to_string()).collect();
            if connections.is_empty() {
                connections = vec![line.to_string()];
            }
            let valve_name = valve_name.to_string();

            output.nodes.insert(Node {
                id: index,
                name: valve_name,
                value: flow_rate_str.parse().unwrap(),
                starting_cost: 0,
            });

            direct_connections.extend(connections.into_iter().map(|to_name| (index, to_name)));
        }

        for (index, to_name) in direct_connections {
            let to_id = output.node_id_from_name(to_name);

            let mut edge = Edge {
                from: index,
                to: to_id,
                distance: 1,
            };

            edge.normalize();

            output.edges.insert(edge);
        }

        let floyd_warshall_graph = output.as_floyd_warshall_graph();
        let distance = floyd_warshall(&floyd_warshall_graph);
        let distance: Vec<Vec<usize>> = distance
            .iter()
            .map(|row| {
                row.iter()
                    .map(|dist| dist.expect("distance to all nodes known"))
                    .collect()
            })
            .collect();

        output.distance = distance;

        output
    }
}

fn floyd_warshall(graph: &Vec<Vec<Option<usize>>>) -> Vec<Vec<Option<usize>>> {
    let n = graph.len();
    let mut distance = graph.clone();

    for k in 0..n {
        for i in 0..n {
            for j in 0..n {
                if let (Some(x), Some(y)) = (distance[i][k], distance[k][j]) {
                    if let Some(z) = distance[i][j] {
                        distance[i][j] = Some(min(z, x + y));
                    } else {
                        distance[i][j] = Some(x + y);
                    }
                }
            }
        }
    }

    distance
}

pub fn solve_1(input: &str) -> String {
    let mut graph = Graph::from(input);

    graph.simplify(0);

    let nodes: Vec<Node> = graph.nodes.iter().cloned().collect();

    let score = graph.solve(30, 0, &nodes);

    todo!()
}
pub fn solve_2(input: &str) -> String {
    "todo".to_string()
}
